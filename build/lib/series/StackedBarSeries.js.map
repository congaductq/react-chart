{"version":3,"sources":["../../../src/lib/series/StackedBarSeries.js"],"names":["identityStack","drawOnCanvasHelper","svgHelper","getBarsSVG2","drawOnCanvas2","getBars","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","d3Stack","clip","getAxisCanvas","Component","propTypes","baseAt","PropTypes","oneOfType","number","func","isRequired","direction","oneOf","stroke","bool","width","opacity","fill","string","className","defaultProps","xScale","yScale","range","plotDataLengthBarWidth","widthRatio","swapScales","keys","stack","data","response","map","key","i","arrays","array","d","index","x","arguments","length","stackFn","defaultPostAction","identity","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","convertToArray","item","Array","isArray","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","each","y","height","idx","nest","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","strokeRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":"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","file":"StackedBarSeries.js","sourcesContent":["\r\n\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { nest as d3Nest } from \"d3-collection\";\r\nimport { merge } from \"d3-array\";\r\nimport { stack as d3Stack } from \"d3-shape\";\r\n\r\nimport GenericChartComponent from \"../GenericChartComponent\";\r\nimport { getAxisCanvas } from \"../GenericComponent\";\r\n\r\nimport { identity, hexToRGBA, head, functor, plotDataLengthBarWidth } from \"../utils\";\r\n\r\nclass StackedBarSeries extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.renderSVG = this.renderSVG.bind(this);\r\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\r\n\t}\r\n\tdrawOnCanvas(ctx, moreProps) {\r\n\t\tconst { xAccessor } = moreProps;\r\n\t\t// var { xScale, chartConfig: { yScale }, plotData } = moreProps;\r\n\r\n\t\tdrawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\r\n\t}\r\n\trenderSVG(moreProps) {\r\n\t\tconst { xAccessor } = moreProps;\r\n\r\n\t\treturn <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\r\n\t}\r\n\trender() {\r\n\t\tconst { clip } = this.props;\r\n\r\n\t\treturn <GenericChartComponent\r\n\t\t\tclip={clip}\r\n\t\t\tsvgDraw={this.renderSVG}\r\n\t\t\tcanvasDraw={this.drawOnCanvas}\r\n\t\t\tcanvasToDraw={getAxisCanvas}\r\n\t\t\tdrawOn={[\"pan\"]}\r\n\t\t/>;\r\n\t}\r\n}\r\n\r\nStackedBarSeries.propTypes = {\r\n\tbaseAt: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.func,\r\n\t]).isRequired,\r\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]).isRequired,\r\n\tstroke: PropTypes.bool.isRequired,\r\n\twidth: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.func\r\n\t]).isRequired,\r\n\topacity: PropTypes.number.isRequired,\r\n\tfill: PropTypes.oneOfType([\r\n\t\tPropTypes.func, PropTypes.string\r\n\t]).isRequired,\r\n\tclassName: PropTypes.oneOfType([\r\n\t\tPropTypes.func, PropTypes.string\r\n\t]).isRequired,\r\n\tclip: PropTypes.bool.isRequired,\r\n};\r\n\r\nStackedBarSeries.defaultProps = {\r\n\tbaseAt: (xScale, yScale/* , d*/) => head(yScale.range()),\r\n\tdirection: \"up\",\r\n\tclassName: \"bar\",\r\n\tstroke: true,\r\n\tfill: \"#4682B4\",\r\n\topacity: 0.5,\r\n\twidth: plotDataLengthBarWidth,\r\n\twidthRatio: 0.8,\r\n\tclip: true,\r\n\tswapScales: false,\r\n};\r\n\r\nexport function identityStack() {\r\n\tlet keys = [];\r\n\tfunction stack(data) {\r\n\t\tconst response = keys.map((key, i) => {\r\n\t\t\t// eslint-disable-next-line prefer-const\r\n\t\t\tlet arrays = data.map(d => {\r\n\t\t\t\t// eslint-disable-next-line prefer-const\r\n\t\t\t\tlet array = [0, d[key]];\r\n\t\t\t\tarray.data = d;\r\n\t\t\t\treturn array;\r\n\t\t\t});\r\n\t\t\tarrays.key = key;\r\n\t\t\tarrays.index = i;\r\n\t\t\treturn arrays;\r\n\t\t});\r\n\t\treturn response;\r\n\t}\r\n\tstack.keys = function(x) {\r\n\t\tif (!arguments.length) {\r\n\t\t\treturn keys;\r\n\t\t}\r\n\t\tkeys = x;\r\n\t\treturn stack;\r\n\t};\r\n\treturn stack;\r\n}\r\n\r\n\r\nexport function drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\r\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\r\n\r\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\r\n\r\n\tdrawOnCanvas2(props, ctx, bars);\r\n}\r\n\r\nfunction convertToArray(item) {\r\n\treturn Array.isArray(item) ? item : [item];\r\n}\r\n\r\nexport function svgHelper(props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\r\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\r\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\r\n\treturn getBarsSVG2(props, bars);\r\n}\r\n\r\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\r\n\tconst { yAccessor, swapScales } = props;\r\n\r\n\tconst modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\r\n\tconst modifiedXAccessor = swapScales ? yAccessor : xAccessor;\r\n\r\n\tconst modifiedXScale = swapScales ? yScale : xScale;\r\n\tconst modifiedYScale = swapScales ? xScale : yScale;\r\n\r\n\tconst postProcessor =  swapScales ? postRotateAction : defaultPostAction;\r\n\r\n\tconst bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\r\n\r\n\treturn bars;\r\n}\r\n\r\nexport const rotateXY = (array) => array.map(each => {\r\n\treturn {\r\n\t\t...each,\r\n\t\tx: each.y,\r\n\t\ty: each.x,\r\n\t\theight: each.width,\r\n\t\twidth: each.height\r\n\t};\r\n});\r\n\r\nexport function getBarsSVG2(props, bars) {\r\n\t/* eslint-disable react/prop-types */\r\n\tconst { opacity } = props;\r\n\t/* eslint-enable react/prop-types */\r\n\r\n\treturn bars.map((d, idx) => {\r\n\t\tif (d.width <= 1) {\r\n\t\t\treturn <line key={idx} className={d.className}\r\n\t\t\t\tstroke={d.fill}\r\n\t\t\t\tx1={d.x} y1={d.y}\r\n\t\t\t\tx2={d.x} y2={d.y + d.height} />;\r\n\t\t}\r\n\t\treturn <rect key={idx} className={d.className}\r\n\t\t\tstroke={d.stroke}\r\n\t\t\tfill={d.fill}\r\n\t\t\tx={d.x}\r\n\t\t\ty={d.y}\r\n\t\t\twidth={d.width}\r\n\t\t\tfillOpacity={opacity}\r\n\t\t\theight={d.height} />;\r\n\t});\r\n}\r\n\r\nexport function drawOnCanvas2(props, ctx, bars) {\r\n\tconst { stroke } = props;\r\n\r\n\tconst nest = d3Nest()\r\n\t\t.key(d => d.fill)\r\n\t\t.entries(bars);\r\n\r\n\tnest.forEach(outer => {\r\n\t\tconst { key, values } = outer;\r\n\t\tif (head(values).width > 1) {\r\n\t\t\tctx.strokeStyle = key;\r\n\t\t}\r\n\t\tconst fillStyle = head(values).width <= 1\r\n\t\t\t? key\r\n\t\t\t: hexToRGBA(key, props.opacity);\r\n\t\tctx.fillStyle = fillStyle;\r\n\r\n\t\tvalues.forEach(d => {\r\n\t\t\tif (d.width <= 1) {\r\n\t\t\t\t/* <line key={idx} className={d.className}\r\n\t\t\t\t\t\t\tstroke={stroke}\r\n\t\t\t\t\t\t\tfill={fill}\r\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\r\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\r\n\t\t\t\t/*\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.moveTo(d.x, d.y);\r\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\r\n\t\t\t\tctx.stroke();\r\n\t\t\t\t*/\r\n\t\t\t\tctx.fillRect(d.x - 0.5, d.y, 1, d.height);\r\n\t\t\t} else {\r\n\t\t\t\t/* <rect key={idx} className={d.className}\r\n\t\t\t\t\t\tstroke={stroke}\r\n\t\t\t\t\t\tfill={fill}\r\n\t\t\t\t\t\tx={d.x}\r\n\t\t\t\t\t\ty={d.y}\r\n\t\t\t\t\t\twidth={d.width}\r\n\t\t\t\t\t\theight={d.height} /> */\r\n\t\t\t\t/*\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\r\n\t\t\t\tctx.fill();\r\n\t\t\t\t*/\r\n\t\t\t\tctx.fillRect(d.x, d.y, d.width, d.height);\r\n\t\t\t\tif (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport function getBars(props, xAccessor, yAccessor, xScale, yScale, plotData, stack = identityStack, after = identity) {\r\n\tconst { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\r\n\r\n\tconst getClassName = functor(className);\r\n\tconst getFill = functor(fill);\r\n\tconst getBase = functor(baseAt);\r\n\r\n\tconst widthFunctor = functor(props.width);\r\n\tconst width = widthFunctor(props, {\r\n\t\txScale,\r\n\t\txAccessor,\r\n\t\tplotData\r\n\t});\r\n\r\n\tconst barWidth = Math.round(width);\r\n\r\n\tconst eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\r\n\r\n\tconst offset = (barWidth === 1 ? 0 : 0.5 * width);\r\n\r\n\tconst ds = plotData\r\n\t\t.map(each => {\r\n\t\t\t// eslint-disable-next-line prefer-const\r\n\t\t\tlet d = {\r\n\t\t\t\tappearance: {\r\n\t\t\t\t},\r\n\t\t\t\tx: xAccessor(each),\r\n\t\t\t};\r\n\t\t\tyAccessor.forEach((eachYAccessor, i) => {\r\n\t\t\t\tconst key = `y${i}`;\r\n\t\t\t\td[key] = eachYAccessor(each);\r\n\t\t\t\tconst appearance = {\r\n\t\t\t\t\tclassName: getClassName(each, i),\r\n\t\t\t\t\tstroke: stroke ? getFill(each, i) : \"none\",\r\n\t\t\t\t\tfill: getFill(each, i),\r\n\t\t\t\t};\r\n\t\t\t\td.appearance[key] = appearance;\r\n\t\t\t});\r\n\t\t\treturn d;\r\n\t\t});\r\n\r\n\tconst keys = yAccessor.map((_, i) => `y${i}`);\r\n\r\n\t// console.log(ds);\r\n\r\n\tconst data = stack().keys(keys)(ds);\r\n\r\n\t// console.log(data);\r\n\r\n\tconst newData = data.map((each, i) => {\r\n\t\tconst key = each.key;\r\n\t\treturn each.map((d) => {\r\n\t\t\t// eslint-disable-next-line prefer-const\r\n\t\t\tlet array = [d[0], d[1]];\r\n\t\t\tarray.data = {\r\n\t\t\t\tx: d.data.x,\r\n\t\t\t\ti,\r\n\t\t\t\tappearance: d.data.appearance[key]\r\n\t\t\t};\r\n\t\t\treturn array;\r\n\t\t});\r\n\t});\r\n\t// console.log(newData);\r\n\t// console.log(merge(newData));\r\n\r\n\tconst bars = merge(newData)\r\n\t\t// .filter(d => isDefined(d.y))\r\n\t\t.map(d => {\r\n\t\t\t// let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\r\n\t\t\tlet y = yScale(d[1]);\r\n\t\t\t/* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\r\n\t\t\t\t\t? yScale(d.y0) - y\r\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\r\n\t\t\tlet h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\r\n\t\t\t// console.log(d.y, yScale.domain(), yScale.range())\r\n\t\t\t// let h = ;\r\n\t\t\t// if (d.y < 0) h = -h;\r\n\t\t\t// console.log(d, y, h)\r\n\t\t\tif (h < 0) {\r\n\t\t\t\ty = y + h;\r\n\t\t\t\th = -h;\r\n\t\t\t}\r\n\t\t\t// console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\r\n\t\t\t/* console.log(d.series, d.datum.date, d.x,\r\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\r\n\t\t\treturn {\r\n\t\t\t\t...d.data.appearance,\r\n\t\t\t\t// series: d.series,\r\n\t\t\t\t// i: d.x,\r\n\t\t\t\tx: Math.round(xScale(d.data.x) - width / 2),\r\n\t\t\t\ty: y,\r\n\t\t\t\tgroupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\r\n\t\t\t\tgroupWidth: Math.round(eachBarWidth),\r\n\t\t\t\toffset: Math.round(offset),\r\n\t\t\t\theight: h,\r\n\t\t\t\twidth: barWidth,\r\n\t\t\t};\r\n\t\t})\r\n\t\t.filter(bar => !isNaN(bar.y));\r\n\r\n\treturn after(bars);\r\n}\r\n\r\nexport default StackedBarSeries;\r\n"]}